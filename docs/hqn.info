This is hqn.info, produced by makeinfo version 6.7 from docs.texi.

This manual is for Harlequeen message server (eq hqn) (version 1.0, 31
December 2017).

   Copyright (C) 2020 Harley Kooper

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".

INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Hqn: (hqn).           GIS server w/ client.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Group servers
START-INFO-DIR-ENTRY
* harlequin: (harlequin)Invoking libtool. Running the server.
* hqnclient: (hqnclient)Invoking hqnclient.  Running remote client.
END-INFO-DIR-ENTRY


File: hqn.info,  Node: Top,  Next: Introduction,  Up: (dir)

Harlequeen message server (eq hqn)
**********************************

This is document contains all documents about hqn.  Only this document
can (and has to) be used for settings, tuning and working with one.

* Menu:

* Introduction::    The Introduction is the only chapter in this sample.
* Technical description:: What is it and how does it work?
* Installation:: 	Installation manual.
* Configuration::   Server configuration
* Client access:: 	Client access description (IMPORTANT)
* Index::           Complete index.


Introduction
Technical description
* Common::  In common.

Installation
* Requirements::    		What I have to have?
* Build from src::			Alas! Nothig other.
* Properley installation::	How to it wiil installed and works.
* Postinstall::             What else.

Index



File: hqn.info,  Node: Introduction,  Next: Technical description,  Prev: Top,  Up: Top

1 Introduction
**************

HQN - open source software.

   HQN doesn't change any received data, hold and retransmitted ones "as
is".  All times inside HQN at UTC, unit's times as received from unit's.


File: hqn.info,  Node: Technical description,  Next: Installation,  Prev: Introduction,  Up: Top

2 Technical description
***********************

Technical description here.  Main things:
* Menu:

* Common::  In common.


File: hqn.info,  Node: Common,  Up: Technical description

2.1 Common
==========


File: hqn.info,  Node: Installation,  Next: Configuration,  Prev: Technical description,  Up: Top

3 Installation
**************

It's wrote with g++ (version c++11) over x86_64 CentOS7/RHEL7.2/Fedora
24 There's NOT TESTED at ANY OTHER distribs and/or platforms.  You can
obtain and do it youself.  If someone does not like it - ure welcome.

* Menu:

* Requirements::    		What I have to have?
* Build from src::			Alas! Nothig other.
* Properley installation::	How to it wiil installed and works.
* Postinstall::             What else.


File: hqn.info,  Node: Requirements,  Next: Build from src,  Up: Installation

3.1 Requirements to install
===========================

  1. Common:
       1. gcc/g++ version 7+ (-std=c++17 required) && libs,
       2. libtools,
       3. automake,
       4. openssl
       5. boost 1.72

   If you want obtain full functional HQN you need to nave also:


File: hqn.info,  Node: Build from src,  Next: Properley installation,  Prev: Requirements,  Up: Installation

3.2 Build from src
==================


File: hqn.info,  Node: Properley installation,  Next: Postinstall,  Prev: Build from src,  Up: Installation

3.3 Properley installation
==========================

Properley installation - it's about postgresql.


File: hqn.info,  Node: Postinstall,  Prev: Properley installation,  Up: Installation

3.4 Postinstall
===============

Nothing to do with HQN w/o SSL certificates.  Any access by 'hqnclient'
require client's certificate.  You can do it by next steps:

  1. Create own CA or use bought.
  2. Create server certificate, signed by CA from prev point.  Or use
     bought.
  3. Server certificate, signed by CA from prev point.  Create own or
     use bought.
  4. Create client's key and CSR, create certificate signed by server
     certificate (not CA, but in your choice) certificate.

   If you want use own SSL infrastructure:
  1. Generate password encrypted root CA key:
          	openssl genrsa -des3 -out rootCA.key 2048
  2. Create self-signed certificate:
          	openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.pem
  3. Ship pem to clients to add it into local trusted store by browser
     or manually (example for CentOs 6):
          	sudo -s
          	yum install ca-certificates
          	update-ca-trust force-enable
          	cp rootCA.pem /etc/pki/ca-trust/source/anchors/rootCA.crt
          	update-ca-trust extract
  4. Server's certificates signed by this CA:
        * key:
               	openssl genrsa -out device.key 2048
        * certificate:
               	openssl req -new -key device.key -out device.csr
          it will require VALID ip address here (wrong ip will reject
          ssl request from 'hqnclient'):
               	Common Name (eg, YOUR name) []: 10.0.0.1
        * sign it by CA:
               	openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 500 -sha256
  5. Client's certificate (NOTE: too many passwords in proc, try use 1st
     always - less secured but more simple, it isn't banking system)
        * request creation (making by client):
               	openssl genrsa -des3 -out client.key 4096
               	openssl req -new -key client.key -out client.csr
        * then send csr to server admin, obtain signed:
               	openssl x509 -req -in client.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out client.crt -days 365 -sha256
        * [optional] convert client key to pkcs:
               	openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12
        * [optional after 5.3] convert client key to pem:
               	openssl pkcs12 -in client.p12 -out client.pem -clcerts
        * remove passfrase from key, secured key will store in other
          file:
               	cp client.key client.key.secure
                 	openssl rsa -in client.key.secure -out client.key
  6. If you use a dh temp file :
          	openssl dhparam -outform PEM -out dh2048.pem 2048
  7. Test ssl infrastructure:
          	openssl s_client -connect <host>:<port>

   By default HQN hold configs at '/etc/hqn'.  Put 'hqn.xml' here.
Keystore lives nextdoor: '/etc/hqn/.keystore'.  Put here CA (if you
didn't set it to 'ca-certificates') and server's key and certificate.


File: hqn.info,  Node: Configuration,  Next: Client access,  Prev: Installation,  Up: Top

4 Configuration
***************

By default HQN hold configs at '/etc/hqn'.  Put 'hqn.xml' here.

* Menu:

* Core::  Core configuration.
* Store::  Store configuration.


File: hqn.info,  Node: Core,  Next: Store,  Up: Configuration

4.1 Core
========


File: hqn.info,  Node: Store,  Prev: Core,  Up: Configuration

4.2 Store
=========


File: hqn.info,  Node: Client access,  Next: Index,  Prev: Configuration,  Up: Top

5 Client access
***************

HQN use hqnclient for access to server.  It works over TLS1.2 only and
first of all, client must obtain certificate from server administrator.
If you're an administrator and want first time connected, you must
create your own certificate for those e-mail that you define at 'mailto'
of '<smtp>' tag in hqn.xml.  You need 'openssl' and about 5 minutes.
*Note Postinstall: Postinstall.  Client's e-mail included as '<member>'
in some '<account>' means only configured, but doensn't active and
enabled.  If client obtain certificate it means that his account at
server active and enabled only.  Client has to put certificate (and
private key) to '$HOME/.hqn/.ks/'.  It has to be pair of .crt and .key
or single .pem file per registered e-mail.  If you removed private key's
passfrase then reccomended to store new key in separate .key file and to
move .pem in .crt that produce pair against single with passfrase.  If
you held private key's passfrase then you will asked about one and
passfrase will showed at input time.  It isn't bug, it was lazy to fix
it and wiil hided in future versions.


File: hqn.info,  Node: Index,  Prev: Client access,  Up: Top

Index
*****

 [index ]
* Menu:

* Build from src:                        Build from src.        (line 5)
* chapter, first:                        Introduction.          (line 6)
* chapter, first <1>:                    Technical description. (line 6)
* chapter, first <2>:                    Installation.          (line 6)
* chapter, first <3>:                    Configuration.         (line 6)
* chapter, first <4>:                    Client access.         (line 6)
* Common to Technical description:       Common.                (line 5)
* Core to configuration:                 Core.                  (line 5)
* HQN - open source message broker:      Introduction.          (line 6)
* Postinstall:                           Postinstall.           (line 6)
* Properley installation:                Properley installation.
                                                                (line 6)
* Requirements to install:               Requirements.          (line 6)
* Store to configuration:                Store.                 (line 5)
* Technical description of HQN - open source software for receive GIS: Technical description.
                                                                (line 6)



Tag Table:
Node: Top903
Node: Introduction1760
Node: Technical description2058
Node: Common2282
Node: Installation2366
Node: Requirements2907
Node: Build from src3264
Node: Properley installation3415
Node: Postinstall3630
Node: Configuration6687
Node: Core6950
Node: Store7034
Node: Client access7120
Node: Index8331

End Tag Table


Local Variables:
coding: utf-8
End:
