\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename hqn.info
@settitle Harlequeen message server
@c For double-sided printing, uncomment:
@c @setchapternewpage odd
@c Put everything in one index (arbitrarily chosen to be the concept index).

@syncodeindex vr cp
@syncodeindex fn cp
@syncodeindex tp cp
@synindex pg cp
@c %**end of header

@include version.texi
@set BUGADDR the Libtool bug reporting address @email{bug-hqn@@harley.bs}
@set MAILLIST the Libtool mailing list @email{hqn@@harley.bs}

@copying
This manual is for Harlequeen message server (eq hqn) (version @value{VERSION}, @value{UPDATED}).

Copyright @copyright{} 2020 Harley Kooper

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts,
and with no Back-Cover Texts.  A copy of the license is included in
the section entitled ``GNU Free Documentation License''.

@end copying

@dircategory Software development
@direntry
* Hqn: (hqn).           GIS server w/ client.
@end direntry

@dircategory Group servers
@direntry
* harlequin: (harlequin)Invoking libtool. Running the server.
* hqnclient: (hqnclient)Invoking hqnclient.  Running remote client.
@end direntry


@titlepage
@title HQN server description
@subtitle For version @value{VERSION}, @value{UPDATED}
@author Harley Kooper

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage


@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top
@top Harlequeen message server (eq hqn)

This is document contains all documents about hqn. Only this document can (and has to) be used for settings, tuning and working with one.

@menu
* Introduction::    The Introduction is the only chapter in this sample.
* Technical description:: What is it and how does it work?
* Installation:: 	Installation manual.
* Configuration::   Server configuration
* Client access:: 	Client access description (IMPORTANT)                       
* Index::           Complete index.

@detailmenu

Introduction
Technical description
* Common::  In common.

Installation
* Requirements::    		What I have to have?
* Build from src::			Alas! Nothig other.
* Properley installation::	How to it wiil installed and works.
* Postinstall::             What else.

Index

@end detailmenu
@end menu
@end ifnottex

@c =========================  Introduction ====================================
@node Introduction
@chapter Introduction
@cindex chapter, first


@cindex HQN - open source message broker
HQN - open source software.

@b{HQN} doesn't change any received data, hold and retransmitted ones "as is". 
All times inside HQN at UTC, unit's times as received from unit's.

@c =========================  Technical description ====================================
@node Technical description
@chapter Technical description
@cindex chapter, first


@cindex Technical description of HQN - open source software for receive GIS
Technical description here. Main things:
@menu
* Common::  In common.
@end menu
 
@c -------------  TD Common -------------------------------
@node Common
@c ................
@section Common 
@cindex Common to Technical description

@c ======================= Installation ======================================
@node Installation
@c ................
@chapter Installation

@cindex chapter, first

It's wrote with g++ (version c++11) over x86_64 CentOS7/RHEL7.2/Fedora 24
There's NOT TESTED at ANY OTHER distribs and/or platforms. You can obtain and do it youself.
If someone does not like it -  ure welcome.

@menu
* Requirements::    		What I have to have?
* Build from src::			Alas! Nothig other.
* Properley installation::	How to it wiil installed and works.
* Postinstall::             What else.
@end menu

@c -------------  Requirements -------------------------------
@node Requirements
@c ................
@section Requirements to install
@cindex Requirements to install

@enumerate
@item
Common: 
	@enumerate
	@item
		gcc/g++ && libs, 
	@item
		libtools, 
	@item
		automake, 
	@item
		openssl
    @item
        boost 1.72
	@end enumerate
@end enumerate

If you want obtain full functional @b{HQN} you need to nave also:

@c --------------------  Build from src ------------------------
@node Build from src
@c ................
@section Build from src
@cindex Build from src


@c --------------------------------------------
@node Properley installation
@c ................
@section Properley installation
@cindex Properley installation
Properley installation - it's about postgresql. 

@c --------------------------------------------
@node Postinstall
@c ................
@section Postinstall
@cindex Postinstall
Nothing to do with HQN w/o SSL certificates. Any access by @code{hqnclient} require client's certificate. You can do it by next steps: 

@enumerate
@item
Create own CA or use bought.
@item
Create server certificate, signed by CA from prev point. Or use bought.
@item
Server certificate, signed by CA from prev point. Create own or use bought.
@item
Create client's key and CSR, create certificate signed by server certificate (not CA, but in your choice) certificate. 

@end enumerate

If you want use own SSL infrastructure:
@enumerate
@item
Generate password encrypted root CA key:
@example
	openssl genrsa -des3 -out rootCA.key 2048
@end example
@item
Create self-signed certificate:
@example
	openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.pem
@end example
@item
Ship pem to clients to add it into local trusted store by browser or manually (example for CentOs 6):
@example   
	sudo -s
	yum install ca-certificates
	update-ca-trust force-enable
	cp rootCA.pem /etc/pki/ca-trust/source/anchors/rootCA.crt
	update-ca-trust extract
@end example
@item
Server's certificates signed by this CA:
	@itemize @bullet
	@item
  	key:
	@example
	openssl genrsa -out device.key 2048
	@end example
	@item
  	certificate:
	@example
	openssl req -new -key device.key -out device.csr
	@end example
    it will require VALID ip address here (wrong ip will reject ssl request from @code{hqnclient}):
	@example	
	Common Name (eg, YOUR name) []: 10.0.0.1
	@end example
	@item
	sign it by CA:
	@example	
	openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 500 -sha256
	@end example
	@end itemize
@item
Client's certificate (NOTE: too many passwords in proc, try use 1st always - less secured but more simple, it isn't banking system)
	@itemize @bullet
	@item
  	request creation (making by client):
	@example	
	openssl genrsa -des3 -out client.key 4096
	openssl req -new -key client.key -out client.csr
	@end example
	@item
  	then send csr to server admin, obtain signed:
	@example	
	openssl x509 -req -in client.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out client.crt -days 365 -sha256
	@end example
	@item
  	[optional] convert client key to pkcs:
	@example	
	openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12
	@end example
	@item
  	[optional after 5.3] convert client key to pem:
	@example	
	openssl pkcs12 -in client.p12 -out client.pem -clcerts
	@end example
	@item
  	remove passfrase from key, secured key will store in other file:
	@example	
	cp client.key client.key.secure
  	openssl rsa -in client.key.secure -out client.key
	@end example
	@end itemize
@item
If you use a dh temp file :
	@example	
	openssl dhparam -outform PEM -out dh2048.pem 2048
	@end example
@item
Test ssl infrastructure:
	@example	
	openssl s_client -connect <host>:<port>
	@end example
@end enumerate
	
By default HQN hold configs at @code{/etc/hqn}. Put @code{hqn.xml} here. Keystore lives nextdoor:  @code{/etc/hqn/.keystore}. 
Put here CA (if you didn't set it to @code{ca-certificates}) and server's key and certificate. 
	
	
@c ======================= Configuration ======================================
@node Configuration
@c ................
@chapter Configuration
@cindex chapter, first
By default HQN hold configs at @code{/etc/hqn}. Put @code{hqn.xml} here.

@menu
* Core::  Core configuration.
* Store::  Store configuration.
@end menu

@c -------------  Configuration Core -------------------------------
@node Core
@c ................
@section Core 
@cindex Core to configuration

@c -------------  Configuration Store -------------------------------
@node Store
@c ................
@section Store 
@cindex Store to configuration

@c ======================= Client access ======================================
@node Client access
@c ................
@chapter Client access
@cindex chapter, first
HQN use @b{hqnclient} for access to server. It works over TLS1.2 only and first of all, client must obtain certificate from server administrator. 
If you're an administrator and want first time connected, you must create your own certificate for those e-mail that you define at @code{mailto} of @kbd{<smtp>} tag in @b{hqn.xml}.
You need @command{openssl} and about 5 minutes. @xref{Postinstall,, Postinstall}. Client's e-mail included as @code{<member>} in some @code{<account>} means only configured, but doensn't active and enabled.
If client obtain certificate it means that his account at server active and enabled only.  
Client has to put certificate (and private key) to @code{$HOME/.hqn/.ks/}. It has to be pair of .crt and .key or single .pem file per registered e-mail. 
If you removed private key's passfrase then reccomended to store new key in separate .key file and to move .pem in .crt that produce pair against single with passfrase.
If you held private key's passfrase then you will asked about one and passfrase @b{will showed at input time}. It isn't bug, it was lazy to fix it and wiil hided in future versions.



@c =============================================================
@node Index
@unnumbered Index


@printindex cp

@bye


